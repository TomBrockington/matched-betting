// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  DEVELOPER
}

// TODO: add to erd
enum Category {
  GENERAL
  EVENTS
  NEWBIES
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  username  String    @default("Mr. Default")
  profile   Profile?
  posts     Post[]
  comments  Comment[]
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Profile {
  id            Int       @id @default(autoincrement())
  firstname     String
  lastname      String
  biography     String
  profileImgUrl String    @default("https://www.pngfind.com/pngs/m/676-6764065_default-profile-picture-transparent-hd-png-download.png")
  bank          Int       @default(1000)
  betHistory    String[]
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

// TODO: include comments in post returns
model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  category  Category
  ownerName String
  comments  Comment[]
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  postId    Int
  post      Post      @relation(fields: [postId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  Int?
  parent    Comment?  @relation("replies", fields: [parentId], references: [id])
  replies   Comment[] @relation("replies")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Link {
  id        Int       @id @default(autoincrement())
  company   String
  betType   String
  minBet    Int
  url       String
  endDate   DateTime
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
